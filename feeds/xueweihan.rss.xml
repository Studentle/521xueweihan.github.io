<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>削微寒</title><link>http://xueweihan.com/</link><description></description><atom:link href="http://xueweihan.com/feeds/xueweihan.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 29 Feb 2016 18:01:00 +0800</lastBuildDate><item><title>什么是真正的程序员</title><link>http://xueweihan.com/the-real-programer.html</link><description>&lt;blockquote&gt;
&lt;p&gt;这篇文章的原文来自：&lt;a href="http://ferd.ca/the-little-printf.html"&gt;A Little Printf Story&lt;/a&gt;&lt;br&gt;作者仿照《小王子》中的情节，通过小printf遇见的不同类型的程序员，最后悟出什么才是真正的程序员！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文章略长，但是耐心读完，你肯定会受益良多！&lt;/p&gt;
&lt;h2&gt;第一章&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;（推荐看完整篇文章，再回过头看一遍第一章）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我非常幸运出生在一个电脑和电子游戏还没有普遍的时代。所以我可以和我的小伙伴们一起玩耍，同时发明属于我们的游戏。&lt;/p&gt;
&lt;p&gt;我们十分会玩：用树枝做成'🏹️'。我们可以用树枝做出任何东西，除'回旋镖'。因为你把树枝扔出去，你需要自己捡回来。（作者这个故事是活跃气氛吗？😓）&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/boomerang.png" title="回旋镖" /&gt;&lt;/p&gt;
&lt;p&gt;当我们长大了，上面说的游戏变得很幼稚。你不能把一个松塔当成一个手榴弹；假装拥有神奇的魔法；当其他孩子觉得作为一个成年人很酷。你最终会迫于压力而长大。不过总的来说这也是一个非常幸运的童年。&lt;/p&gt;
&lt;p&gt;偶然的一次机会我接触了电子游戏和电脑。你可能想沉浸在这个虚拟的世界，这会毁了你。&lt;/p&gt;
&lt;p&gt;大多数电子游戏：你不能创造，只能反应，浪费你的时间。我在十多岁的时候，参加过'即兴表演'。在哪里我可以发挥我的创造性。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/improv.png" title="即兴表演" /&gt;&lt;/p&gt;
&lt;p&gt;我大学的专业是'多媒体'，但是我最终却从事'编程'工作。我觉得编程is amazing！我可以发挥我的创造性，同时又可以挣钱！之后我做了我的第一个游戏。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/game.png" title="html游戏" /&gt;&lt;/p&gt;
&lt;p&gt;"这不是一个真正的电子游戏。"别人跟我说："它只是一个html的表单，而且代码需要简化。"&lt;/p&gt;
&lt;p&gt;这席话使我有一些沮丧，它花费了很多心思和时间。但是，我意识到如果我想做出被人们认可的东西的话，我还需要学习更多知识。&lt;/p&gt;
&lt;p&gt;我需要学习真正的编程。从GUI工具里的JS，转到更好的语言：像PHP。所以我先学习了Js，后来又去学习PHP，但是一切并不是很顺利，其他人给我的建议去试试python。最后，我学习的是python（🎊我也是这样走上python之路的🍻）。&lt;/p&gt;
&lt;p&gt;但是python中高深一些的东西：'lambdas'和'面向对象编程'，让我云里雾里的。后来别人建议我去读一下《计算机程序的构造和解释》，因为它是编程的基础入门圣经。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/sicp.png" title="SICP" /&gt;&lt;/p&gt;
&lt;p&gt;就这样，我知道了Scheme，后来我又去学习C语言。因为大多数的程序员都会C，同时我旁听了我们学校的计算机课程，跟着他们一起学习。因为，真正的程序员都知道数据结构和数学，但是这些我只略懂皮毛。我开始读技术文章和书，因为程序员的知识更新太快。&lt;/p&gt;
&lt;p&gt;经过一段时间，我掌握了Erlang，从而开始了我的职业生涯。（这篇文章的作者写了一本：Erlang入门书）。十分奇怪的是：我这个没有用Erlang做过任何生产级别的开发的人，却得到了一份教Erlang的工作。&lt;/p&gt;
&lt;h2&gt;第二章&lt;/h2&gt;
&lt;p&gt;所以我忙于到世界各地演讲，教别人（夸夸其谈）。但是，大家似乎都相信我是一个真正的程序员。因为，我讲的这些事情大多都和编程无关。&lt;/p&gt;
&lt;p&gt;一天，我结束了一个会议回家，飞机晚点。我愤怒的敲击着键盘，一个柔弱的声音打断了我：&lt;/p&gt;
&lt;p&gt;"你好，能请你给我设计一个系统吗？"&lt;/p&gt;
&lt;p&gt;我："什么？"&lt;/p&gt;
&lt;p&gt;"给我设计一个系统！"&lt;/p&gt;
&lt;p&gt;我对这个请求很惊讶。我环视四周，发现一个渴望成为开发者的孩子。他叫'printf'（主角闪亮登场）。我觉得这个名字很傻。他的样子如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/printf-nocover.png" title="little printf" /&gt;&lt;/p&gt;
&lt;p&gt;"我还不是很了解计算机，但是你好像是计算机方面的专家。我希望写一个blog程序，人们可以使用和访问它。求求你帮我设计一个系统！"&lt;/p&gt;
&lt;p&gt;这是个令人惊讶的请求，并且我已经二十多个小时没睡了。我不是完全理解他所说的。我告诉他，做一个系统十分困难。我不知道他想要做什么：需要支持多少访问者；在哪里部署；所以我无法根据他提供的少量信息，设计一个合适的系统。&lt;/p&gt;
&lt;p&gt;"没有关系，给我设计一个系统吧。"&lt;/p&gt;
&lt;p&gt;所以我做了下面这幅结构图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/arch1.png" title="系统结构图1" /&gt;&lt;/p&gt;
&lt;p&gt;他看了之后说："不，这个系统还不够好。请给我再设计一个别的。"&lt;/p&gt;
&lt;p&gt;所以我又做了下面这个：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/arch2.png" title="系统结构图2" /&gt;&lt;/p&gt;
&lt;p&gt;然后我给他讲解这个系统的工作原理。&lt;/p&gt;
&lt;p&gt;我的新朋友 (printf)十分礼貌的说："这不是我想要的，它又太复杂而且好多东西都是我不需要的。"&lt;/p&gt;
&lt;p&gt;我感到十分不爽，我设计的这个系统考虑到了：冗余、监控、备份、缓存、负载、支付、故障转移、部署简单等等。我设计的这个系统都已经可以获得一份可观的咨询费用了！我已经失去耐心了，所以我就画了这个：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/blackbox.png" title="enjoy!" /&gt;&lt;/p&gt;
&lt;p&gt;我又告诉他："这是你设计的系统，你要的系统在这个黑盒子里。"我希望这个滑稽的答案，可以打发他。但是他的回复让我十分惊讶：&lt;/p&gt;
&lt;p&gt;"这正是我想要的！"&lt;/p&gt;
&lt;p&gt;这就是我和小printf相识的过程。&lt;/p&gt;
&lt;h2&gt;第三章&lt;/h2&gt;
&lt;p&gt;过了一段时间，我知道了这个小鬼的编程水平。在他的代码仓库只有些小程序、网站的小demo、琐碎的程序片段。都是些不值得一提的东西。&lt;/p&gt;
&lt;p&gt;之后他开始着手做一个需要很多模块的大型程序。这个程序需要socket、磁盘读写、用到真正的数据库。当它第一次跑起来的时候，小printf十分兴奋。但是，这个程序还不够好。&lt;/p&gt;
&lt;p&gt;这个程序需要重构、更好的测试、文档、分析。它只运行了一段时间就崩溃了。然后一次，又一次的崩溃！&lt;/p&gt;
&lt;p&gt;程序的设置是错误的，日志不工作、磁盘速度不稳定、网络卡顿、有bug、编码混乱、数据库需要清理、证书过期、没有异常处理导致问题找不到根源。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/spaghetti.png" title="一团糟" /&gt;&lt;/p&gt;
&lt;p&gt;真的想面条一样一团糟。&lt;/p&gt;
&lt;p&gt;小printf跟我说："通过这件事，我发现自己简直是一无所知！这个程序本来是根据我的需要写的。我原来的想法太天真了，后来我修复bug的时间和这个程序给我带来的便利根本不成正比！最后，变得跟我原来想的一点都不一样。虽然这样，我仍然认为这件事情让我收获了很多。"&lt;/p&gt;
&lt;p&gt;一天早上，他决定离开我这里。"再见。"小printf跟我做了最后的道别。他想要出去看看世界，看看其他人写的程序。&lt;/p&gt;
&lt;p&gt;小printf写的应用，最后因为不断增加的日志，导致硬盘没有空间，彻底的崩溃了。&lt;/p&gt;
&lt;h2&gt;第四章&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/building.png" title="建筑" /&gt;&lt;/p&gt;
&lt;p&gt;小printf走进了一个办公楼，想寻找有经验的程序员取经，获得一些建议和帮助。&lt;/p&gt;
&lt;p&gt;他遇到一个骄傲的高级程序员，而且自我感觉良好。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/pro.png" title="骄傲的高级工程师" /&gt;&lt;/p&gt;
&lt;p&gt;傲慢的高级程序员说："哎，过来新手！欢迎来到我所擅长领域，在这个领域我是专家！"&lt;/p&gt;
&lt;p&gt;"专家？"小printf问到："专家的意思是：可以编写任何程序吗？"&lt;/p&gt;
&lt;p&gt;"是的！"傲慢的高级程序员回答道，接着他又说："准确的说，应该是大多数程序。因为我只编写有价值的程序，我不会浪费我的时间在没有意义的小程序上。很多程序我都没有写过，但是他们都难不倒我！"&lt;/p&gt;
&lt;p&gt;"额，所以你可以帮我完善我的程序？"小print问到，之后他开始阐述他的网站系统，但是傲慢的高级程序员打断了他：&lt;/p&gt;
&lt;p&gt;"对不起，我觉得你的网站系统没有一点价值。"&lt;/p&gt;
&lt;p&gt;小printf："为什么？"&lt;/p&gt;
&lt;p&gt;"经验，我擅长编写我开发的东西，我也只做我擅长的领域的开发。我需要确保我在我的领域的永远有价值。这叫做工作保障，也叫做适者生存。但这就是我的风格。我只专注于我的领域！"&lt;/p&gt;
&lt;p&gt;小printf："那你为什么不帮我呢？"&lt;/p&gt;
&lt;p&gt;"花费我的时间去帮助你，意味着我需要花费精力去帮助别人，而不是提高自己----这对我来说不是一个好的主意。我的建议是：自己多努力，自己弄懂。还可以塑造你自己的心性"&lt;/p&gt;
&lt;p&gt;小printf："你说的方法，好想不是很高效。。。"&lt;/p&gt;
&lt;p&gt;"你可以到学校去学，或者自学。事实上这种方法可以淘汰那些懒惰，只喜欢简单的事情的人。真正渴望知识的人才能成功！"&lt;/p&gt;
&lt;p&gt;小printf："你认为合作和同事不能帮助你吗？"&lt;/p&gt;
&lt;p&gt;"不，我并不是这个意思。我做好的工作状态是：独立空间，没有让我分心的事。每次我和同事合作的时候，都是一次不好的经历。以往的经验：最好的办法是：把他们的代码拿过来重写。然后就可以了！"&lt;/p&gt;
&lt;p&gt;小printf对这个不喜欢帮助别人的专家感到十分惊讶，不仅如此，他还因人为别人的技术不行而恼火。这个专家眼界是狭隘的，他只关心自己擅长的领域。活在自己的世界里。&lt;/p&gt;
&lt;p&gt;小printf："我明白了，我想我很庆幸你没有帮助我。"&lt;/p&gt;
&lt;p&gt;"你什么意思？"傲慢的专家问到，貌似他的权威受到了威胁："你不认可我，你是在质疑我吗？"&lt;/p&gt;
&lt;p&gt;小printf："并不是这样，就像你觉得我是一个累赘，令人恼怒的一样。我是来寻找帮助的，而不是来找骂的。"&lt;/p&gt;
&lt;p&gt;说完之后，小printf飞快的跑出了傲慢专家的办公室。当小printf离开后，这个专家又重新找回了他所擅长领域的权威，同时自我感觉良好。&lt;/p&gt;
&lt;h2&gt;第五章&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/books.png" title="第五章周围都是书的程序员" /&gt;&lt;/p&gt;
&lt;p&gt;然后，小printf又走进了另外一个办公室。里面有一个男士，他的座位周围都是精装厚厚的书籍（例如代码大全这种书）。&lt;/p&gt;
&lt;p&gt;小printf："先生，你有好多书啊！"&lt;/p&gt;
&lt;p&gt;"是的，我想这些都是程序员必看的书籍，如果你没看过这些，你很难成为'大牛'（专业人士）。"&lt;/p&gt;
&lt;p&gt;小printf："我想我现在还是很菜，请问这些书里面你最喜欢哪本？"&lt;/p&gt;
&lt;p&gt;"哦，是这样的这些书大多数我还没有读过。"&lt;/p&gt;
&lt;p&gt;小printf："那你现在是个'大牛'吗？"&lt;/p&gt;
&lt;p&gt;"不，我还不是。"这个程序员很骄傲的说："我其实是一个很垃圾的程序员。"&lt;/p&gt;
&lt;p&gt;小printf："这太丢人了，我正在努力变强。"&lt;/p&gt;
&lt;p&gt;"你听过'达克效应'吗？"&lt;/p&gt;
&lt;p&gt;小printf："那是什么？"&lt;/p&gt;
&lt;p&gt;"简单的说就是：能力强的人总是低估自己，能力弱的人总是高估自己。"&lt;/p&gt;
&lt;p&gt;小printf："也就是说，如果我觉得自己在变强，其实我并没有变强。"&lt;/p&gt;
&lt;p&gt;"是的，你说的非常正确。你很可能在原地踏步。另一方面，我宣扬我是一个很糟糕的程序员，但根据'达克效应'。我是低估了我自己，所以我是一个好的程序员，你怎么看？"&lt;/p&gt;
&lt;p&gt;小printf："我。。。额"&lt;/p&gt;
&lt;p&gt;"这就是为什么程序员都喜欢自嘲（称自己是码农也算吧？）。当你认为你足够好了，你就放松了，也就没有前进的动力。"（这句话我还是很赞同的👍）&lt;/p&gt;
&lt;p&gt;小printf："你的意思是：一旦自我感觉良好，也就是正在走向失败，因该时刻觉得自己还不够好。"&lt;/p&gt;
&lt;p&gt;"是的，但是用着这种方式应对所有的事很危险，如果你还没有拿到offer。这种方式会让你显的聪明，但是没有任何实际用途，别人不会因为你显的聪明就雇佣你。"&lt;/p&gt;
&lt;p&gt;小printf："你的意思是？"&lt;/p&gt;
&lt;p&gt;"比方说：我在网上看到一个我不喜欢的项目。我留言说项目一无是处，但是不明确的指出哪里不好。最后你还可以说这个项目的作者是笨蛋，也没有人管你。"&lt;/p&gt;
&lt;p&gt;小printf："但是这样做有什么好处呢？"&lt;/p&gt;
&lt;p&gt;"我想让他们知道他们走上歧途了，却又不明确的指出来。这表现的我比他们厉害。然而他们毫无头绪，像雾里看花。没有人能明白我的意思。哇咔咔"&lt;/p&gt;
&lt;p&gt;小printf："当别人请教你的问题，你不会的时候，你会怎么办？"&lt;/p&gt;
&lt;p&gt;"这种情况下你就说到处都是问题，还有很多的不完善的事情要做，总之就是转移话题。然他们感觉绝望，最后还是要他们自己解决。"&lt;/p&gt;
&lt;p&gt;小printf："所以这就是你的立场？这是你的一贯作风？你会的问题装作对此无能为力，使得真正无法解决这个问题的人抓狂；当你遇到不会的问题时，你装作很了解，使得别人根据你的建议改善其它的地方，而与真理相行渐远，浪费时间"&lt;/p&gt;
&lt;p&gt;"很多情况下，才能不是最重要的。但口碑很重要。人们雇佣朋友，不被喜欢的人和无关紧要的人会被第一个被炒鱿鱼（😤MLGB）。要不就改变环境，改不了就要适应，适应不了就被淘汰。这就是'社会'。企业中就是这样，学术届没准也是。做这行，你认识谁，学会推销自己，建立自己的声望。这样你才能在企业里站住脚。"&lt;/p&gt;
&lt;p&gt;小printf："如果在企业中工作是这么恶心，要给别人'使绊'。那么我真不想在这种环境下工作！（黑暗的办公室政治，还好我还没有遇到🙊）"&lt;/p&gt;
&lt;h2&gt;第六章&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/realprog.png" title="第六章忘记吃午饭的程序员" /&gt;&lt;/p&gt;
&lt;p&gt;到了吃午饭的时间，小printf打断了一个貌似忘记吃午饭的人。他桌子上的三明治已经凉了，但是他还是坐在桌子前面盯着他的屏幕。&lt;/p&gt;
&lt;p&gt;他好像十分的忙，但是没人知道他在做什么。&lt;/p&gt;
&lt;p&gt;小printf："如果主数据库挂掉了，从数据库也会挂掉吗？"（创建主从数据库是为了减少DOWN机时间，让数据库可以一直处于工作状态中）&lt;/p&gt;
&lt;p&gt;"你运行的所有东西，或早或晚都会挂掉。"&lt;/p&gt;
&lt;p&gt;小printf："你以往的经历告诉你这一切都会失败？"&lt;/p&gt;
&lt;p&gt;"是的，不仅如此。所有的大系统，都会在特定的时间出现问题。"（就像千年虫问题？🤔）&lt;/p&gt;
&lt;p&gt;小printf："那么，做一个可靠的系统，都需要做什么？"&lt;/p&gt;
&lt;p&gt;那个人忙于他自己的事情，没有理会小printf。&lt;/p&gt;
&lt;p&gt;小printf又问了一次："做一个可靠的系统，都需要做什么？"&lt;/p&gt;
&lt;p&gt;那个人正在尝试解决产品中的一个问题，但是小printf还一直问个不停，同时他还没有吃午饭。&lt;/p&gt;
&lt;p&gt;所以他不耐烦甚至粗鲁的吼道："这根本不可能，编程就是shit💩。"&lt;/p&gt;
&lt;p&gt;小printf倒吸了一口气，半天说不出一句话。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/trashcan.png" title="progamming is shit" /&gt;&lt;/p&gt;
&lt;p&gt;小printf💢愤怒的回击道："我不相信你说的。程序是脆弱的没错，但是程序员可以改善这一点，同时做出更好和有用的东西"&lt;/p&gt;
&lt;p&gt;那个人没有任何回答，他在翻阅文档，尝试重新启动一个新的集群，但是情况却越来越糟糕。&lt;/p&gt;
&lt;p&gt;小printf："并且你应该相信有好的可靠的程。。"&lt;/p&gt;
&lt;p&gt;"不可能"那个人打断了小printf，接着说道："我不相信有可靠或者好的的程序！根本不可能！这是我的第一个感觉，因为我正在处理一个垃圾的系统。你没看见我想法设法地让这个东西跑起来吗？事实如此！"&lt;/p&gt;
&lt;p&gt;小printf很震惊的看着他说道："事实如此？说的好像自己是个专家！是你自己把一切都搞的很糟糕。这世界上有上百万的和久经考验的程序，它们也有bug，也崩溃。但是人们还是需要它们，使用它们。据我所知很多程序是没有问题的。出现问题的原因大多是因为电脑的环境配置问题，或者一个错误的操作造成的。你不认为这才是问题的所在吗？"&lt;/p&gt;
&lt;p&gt;那个人听完哑口无言。&lt;/p&gt;
&lt;h2&gt;第七章&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/frameworks.png" title="第七章盲目追求框架的程序员" /&gt;&lt;/p&gt;
&lt;p&gt;小printf来到了第四个地方，遇到了一个人，他的电脑几乎被便签盖满了，没有人知道他在干什么。&lt;/p&gt;
&lt;p&gt;"motor-mvc, quadrangular JS, GoQuery, cometeor, some japanese soundy thing, ..."&lt;/p&gt;
&lt;p&gt;小printf打断了他的自言自语说道："你好，你在干什么？"&lt;/p&gt;
&lt;p&gt;"alchemist, bongodb, mochascript, walktime.js, portasql, ..."，哪个男士继续自言自语&lt;/p&gt;
&lt;p&gt;小printf提高了音量又问了一次："你在干什么？"&lt;/p&gt;
&lt;p&gt;"哦，我正在尝试新的框架，工具和语言。"&lt;/p&gt;
&lt;p&gt;小printf："哇，你接触的东西好新鲜啊！大多数人还都没有听说过这些。"&lt;/p&gt;
&lt;p&gt;"是的，这个行业跟新很快！"他看了一眼他的手机接着又说到："看，&lt;code&gt;cardboard.io&lt;/code&gt;框架又推出了3.5版本，它宣布不兼容3.4了。于此同时社区中已经有4个衍生版本了。我必须从他们之中挑一个。"&lt;/p&gt;
&lt;p&gt;小printf："你这么做为了什么？"&lt;/p&gt;
&lt;p&gt;"我是最早的尝鲜者，如果你不保持更新技能树，还是用老掉牙的：COBOL或者MUMPS（两门老掉牙的编程语言🤖）。你还想抓住成功的契机，抢占先机，乘势而起？"&lt;/p&gt;
&lt;p&gt;小printf："你成功的预测过以后的热门技术吗？"&lt;/p&gt;
&lt;p&gt;"是的！我发现Rails的时候它还很小，我学会Node.js的时候它还没有流行。我是redis，mongodb和riak的内测用户。我是第一批试用vagrant的用户，然后我转去使用docker，但是现在我全身心的关注unikernels。。"&lt;/p&gt;
&lt;p&gt;小printf："太酷了！你是第一批试用这些的技术的人，你从中得到了什么回报？"&lt;/p&gt;
&lt;p&gt;"额，并没有。当Rails壮大的时候，我就去关注另外的新鲜东西了。同样的，其他的几门技术我也是这样的（他不独宠一个，而是雨露均沾🙈）。我现在把希望寄托在unikernels上。"&lt;/p&gt;
&lt;p&gt;小printf沉思了一会说到："你用这些框架和工具都解决了什么问题？"&lt;/p&gt;
&lt;p&gt;"我每次都确保不使用不成熟的东西，因为不能用公司做赌注。这一点十分重要，因为如果你使用最新的技术，你就可能招不到人，而不关注新的技术，有可能脱离时代的步伐。所以我们鼓励学习新的技术。"&lt;/p&gt;
&lt;p&gt;小printf："这非常有趣。"&lt;/p&gt;
&lt;p&gt;"在这个飞速发展的世界中，如果你想参加这场游戏，你需要有先进的技术。否则你就会被时代淘汰，没有人想被时代淘汰。"&lt;/p&gt;
&lt;p&gt;小printf："不，你误解我的意思了，我的意思是：好的工具是为了解决问题而被制造出来的。但是你却盲目追求新的技术，而不是为了什么实际的目的。"&lt;/p&gt;
&lt;p&gt;听完这些话，哪个人呆住了，小printf跳跃着离开了这个房间。&lt;/p&gt;
&lt;h2&gt;第八章&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/ops.png" title="第八章疲惫不堪的女程序员" /&gt;&lt;/p&gt;
&lt;p&gt;小printf来到了下一个办公室，这里又一个疲惫的女员工。桌子上杂乱无章，整个人无精打采，疯狂的打字。&lt;/p&gt;
&lt;p&gt;小printf："你好。"&lt;/p&gt;
&lt;p&gt;这个女士没有停下了她的手头工作，继续疯狂的打字。&lt;/p&gt;
&lt;p&gt;小printf又打了一遍招呼："你好？"&lt;/p&gt;
&lt;p&gt;女士这次停下了，拿起一瓶咖啡猛灌了一口。&lt;/p&gt;
&lt;p&gt;"我有一份十分糟糕的工作。"她说："我是devops（开发，运维，测试于一体的职位）。刚开始的时候还好，原来我大多数时间进行开发，然后抽出一些时间修复bug。但是，情况变的越来越糟糕，bug开始接连不断。为了摆脱这种情况，同时在规定时间内完成。我不得不使用一些'奇技淫巧'。"&lt;/p&gt;
&lt;p&gt;小printf："你为什么不顾人来帮你？"&lt;/p&gt;
&lt;p&gt;"我很擅长做这些事情。我已经习惯这一切都在我的的掌控之下。还有因为他们已经习惯我可以hold一切，如果我提出我自己无法继续掌控全局的以后，他们很容易认为我在偷懒。"&lt;/p&gt;
&lt;p&gt;小printf："这真是叫人悲伤的故事。"&lt;/p&gt;
&lt;p&gt;"事实就是这样子。因为你是最熟悉这些问题（bug🔥）的人，你只能变的越来越累，直到你的boss招了一个人顶替你原来的工作，这是唯一出路。但如果你担心其他人修改你写的东西时候遇到问题，你只能帮助别人改一个又一个的bug，当然这些都是你讨厌的事情。直到你对这一切感到麻木。"&lt;/p&gt;
&lt;p&gt;小printf："你真不幸。"&lt;/p&gt;
&lt;p&gt;这位女士又被叫去工作了。&lt;/p&gt;
&lt;p&gt;小printf自言自语道："这个女人会被我原来遇到的那些人嘲笑的：那个高级专家（只专注于自己擅长的领域），摇滚开发者（过分追求新技术的人），故做高深的程序员（那个周围都是大头书的装X程序员）。尽管他是这些人里面唯一乐于助人的。或许是因为，她认为一切事情还是亲力亲为的好。"&lt;/p&gt;
&lt;h2&gt;第九章&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/architect.png" title="第九章架构师" /&gt;&lt;/p&gt;
&lt;p&gt;小printf发现在这栋大楼里发现了一个有着巨大落地窗并且宽敞的办公室。这里坐着一个德国老头，他面前堆了一堆的文件。&lt;/p&gt;
&lt;p&gt;"啊！来了一个开发者。"德国老头惊呼道同时招呼小printf说："快进来！"&lt;/p&gt;
&lt;p&gt;小printf环视四周的窗户，发现上面写满了东西。上面画了各种圆圈，箭头，圆柱和云彩（就是图片中玻璃上的图形）。真是搞不懂这个老头画这些东西有什么用。&lt;/p&gt;
&lt;p&gt;小printf："窗户上的都是些什么？"&lt;/p&gt;
&lt;p&gt;"哦，这些？这是我们的线上系统！"那个老头随口说到："我是一个软件架构师。"&lt;/p&gt;
&lt;p&gt;小printf："什么是软件架构师？"&lt;/p&gt;
&lt;p&gt;"总的来说，就是知道如何构建大型系统并且让系统中的每个部分都非常稳定的人。架构师还会数据库，编程语言，框架，编写程序，协议，封装和降低耦合等知识。"&lt;/p&gt;
&lt;p&gt;小printf："听起来都叫人兴奋！终于有人能回答我的所有问题了！"小printf瞥了一眼玻璃上的结构图说到："你们的系统真大，他跑的快吗？"&lt;/p&gt;
&lt;p&gt;"我没法告诉你。"架构师说；"应该会很快吧。"&lt;/p&gt;
&lt;p&gt;小printf："那它的代码怎么样呢？"&lt;/p&gt;
&lt;p&gt;"我没法告诉你。"&lt;/p&gt;
&lt;p&gt;小printf："用户喜欢这个系统吗？"&lt;/p&gt;
&lt;p&gt;"这个我恐怕也没法告诉你。"&lt;/p&gt;
&lt;p&gt;小printf："但是你是软件架构师啊！"&lt;/p&gt;
&lt;p&gt;"我的确是架构师，但是我不是开发者。架构师不做，例如：功能模块，类，整合lib等。这种工作的。架构师最重要的不是写代码。他是指引程序员和开发者的人。如果遇到棘手的，无法解决的问题，架构师才会接手。"&lt;/p&gt;
&lt;p&gt;小printf："这是为什么呢？"&lt;/p&gt;
&lt;p&gt;"因为我们经验十足。我们了解系统并且能解决它的一切问题。开发者可以根据我们的经验和指导，开发出好的系统。"&lt;/p&gt;
&lt;p&gt;小printf："但是你不写，不看代码怎么知道这将是个好的系统？"&lt;/p&gt;
&lt;p&gt;"我们相信开发者。"&lt;/p&gt;
&lt;p&gt;小printf："所以，所你们相信开发者们可以正确的实现你们的想法，但是开发者们没有机会提出他们自己的想法？"&lt;/p&gt;
&lt;p&gt;这个软件架构师明显的愣了一下："我想。。。"他最终承认了："你刚才提出的这个问题，其实工作中很多的提议是没有被证实，或者实验的。。。"他停顿，并沉思了一下说道："有些时候软件架构师看起来既不是软件工程师，也不是架构师（是老师？）。"&lt;/p&gt;
&lt;p&gt;小printf离开了这个房间，结束了他的旅行。走出了这栋楼&lt;/p&gt;
&lt;h2&gt;第十章&lt;/h2&gt;
&lt;p&gt;&lt;img alt="pic18" src="http://7xqirw.com1.z0.glb.clouddn.com/charity.png" title="第十章" /&gt;&lt;/p&gt;
&lt;p&gt;小printf走到外边，发现了一个为慈善机构募集钱的男士。&lt;/p&gt;
&lt;p&gt;"你好"那个男士说道："你觉得帮助一些需要帮助的人的感觉怎么样？"&lt;/p&gt;
&lt;p&gt;小printf："那样可能会让我感觉更好，我在那栋建筑（遇到了各种各样的程序员的大楼）呆了一整天，寻求帮助。但是现在，我感觉比以前更加迷惑了。"&lt;/p&gt;
&lt;p&gt;"嗯，我帮你分析下：那些人都是开发者，他们并没有真正帮到你是吗？他们喜欢说"程序员改变世界"，实时也是这样的。"&lt;/p&gt;
&lt;p&gt;小printf："那为什么我却毫无收获呢？"&lt;/p&gt;
&lt;p&gt;"是这样的，他们最擅长做的事情是帮助把人们的工作变成程序，使人们变的轻松。软件正在吞噬整个世界，使世界改革换面。但是事实上还这还是个旧的世界。因为以这种方式的改变，并不意味着事情变好。我们还是有些根深蒂固的问题（例如：思想的问题，或是缺乏创造性。）。"&lt;/p&gt;
&lt;p&gt;小printf焦急的说："怎么做才能让我感觉更好？"&lt;/p&gt;
&lt;p&gt;那个难事深思了一会，最后提出让小printf帮助他，为需要帮助的人募捐。因为这个男士认为这种方式可以让他感觉更好。用一下午的时间，小printf把他的问题和他的经历都告诉了这个男士。&lt;/p&gt;
&lt;p&gt;这个男士沉思了很长时间说道："在个游戏中，他们从解决复杂的问题而得到快乐和他们看重的名声和身份，这种快乐是片刻的。因为最终，如果你解决的问题没有实际价值（为了解决问题而解决问题），忽略了'以人为本'。那么你永远不会的到真正的满足！"（说的真好！）&lt;/p&gt;
&lt;p&gt;他接着又说："随着你的成长，可能找到一家比之前更好的单位。可能是钱多，或者是因为这个工作更趣，这都很正常。只要你知道你自己想要的是什么！"&lt;/p&gt;
&lt;p&gt;他最后补充道："最后，当你解决了人们真正面临的问题的时候，你会觉得真正的满足！有的时候根本不需要计算机。"&lt;/p&gt;
&lt;p&gt;"你花费了大量的时间在你的系统上。最重要的是：你忘记当初为什么创建这个系统，反而花费时间在优化系统上面，那么它就变成了一场炫耀的游戏。这才是最可悲的。"&lt;/p&gt;
&lt;p&gt;"开发者经常忘记最开始的初衷（真正有意义的事情）。如果你失去做这件事意义，而是为了解决系统的问题，才花时间在这上面。这就是问题的所在（如果你只是为了做好的系统，而不是解决实际问题，那你就应该自我反思了）"&lt;/p&gt;
&lt;p&gt;小printf不断重复这句话，想要印在脑子里："只有在解决人们真正面对的问题的时候，才能获得真正的满足！"&lt;/p&gt;
&lt;h2&gt;第十一章&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/printf-end.png" title="第十一章" /&gt;&lt;/p&gt;
&lt;p&gt;小printf坐在我的前面，和他聊天让我开始认真思考：我为什么走上编程的道路。小printf之前遇到的每个人，仿佛我将来的某一天会成为他们中的一员（这真是个悲伤的情景）。我被这样的人（小printf之前遇到的那些程序员）鼓励成为像他们一样的程序员。&lt;/p&gt;
&lt;p&gt;我也被拖进，小printf不喜欢的那个，成为'真正程序员'的游戏中。小printf曾说过：相比于'真正的程序员'，我更想成为能够为人们解决真正需要解决的问题的程序员（解决真正问题的程序员，而不是解决编程问题的程序员）。&lt;/p&gt;
&lt;p&gt;今天我呆坐在这里，回顾我的整个编程生涯，我想弄清：成为解决真正问题的程序员，还是一切都这是完成工作。这两者是完全不同的。&lt;/p&gt;
&lt;p&gt;不管怎么样，小printf认为他不需要成为一个真正的程序员。我现在，也是这样认为的！&lt;/p&gt;
&lt;h2&gt;我的感受&lt;/h2&gt;
&lt;p&gt;翻译完这篇文章，我觉得这篇文章写的非常好，他让我意识到：编程为了什么？到底什么才是真正的程序员。&lt;/p&gt;
&lt;p&gt;自我反思了下。我一只在忙于追求技术栈的数量，一直是为了追求技术（或者说工作）而学习。&lt;/p&gt;
&lt;p&gt;这就好像，我毫无目的收集树枝，猛然的一个点。我低头看手边一困困的树枝，却忘记了我为什么要去捡树枝。我学习python中的框架就是这种感觉，为了工作，我学习flask，bottle，tornado框架。但是，一切都是为了工作。导致我想从零写一个web app都毫无头绪，不知道如何下手。&lt;/p&gt;
&lt;p&gt;对于以后的编程之路：我以后应该以目的为驱动力，不盲目的追求技术。经常问自己，我这么做有什么意义。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://codingpy.com/article/the-little-printf-chapter01/"&gt;编程派：这个网站上只翻译到了第五章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">xueweihan</dc:creator><pubDate>Mon, 29 Feb 2016 18:01:00 +0800</pubDate><guid>tag:xueweihan.com,2016-02-29:the-real-programer.html</guid><category>程序员</category><category>翻译</category></item><item><title>用pelican在Github pages上搭建博客</title><link>http://xueweihan.com/pelican-build-bolg.html</link><description>&lt;h1&gt;pelican&lt;/h1&gt;
&lt;p&gt;Pelican Static Site Generator, Powered by Python：Pelican是python语言写的静态网站生成器。因为我一直打算用github pages做一个博客，现在已经学会用Hexo在github pages上做博客了。但是我一想：我一个pythoner，干嘛不用python写的静态网站生成器。我想应该是网上教程太少，那我今天就来搞一搞。顺便记录下来，整理出一个教程，希望一切顺利！&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;开始&lt;/h2&gt;
&lt;p&gt;1.首先用virtualenv创建一个env&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir blog
cd blog
virtualenv env
source env/bin/activate  #激活环境
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.使用pip安装pelican和markdown&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pelican
pip install markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.创建pelican目录结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
# 根据提示进行设置

&amp;gt; Where do you want to create your new web site? [.]
&amp;gt; What will be the title of this web site? 削微寒
&amp;gt; Who will be the author of this web site? xueweihan
&amp;gt; What will be the default language of this web site? [en] zh
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n)
&amp;gt; What is your URL prefix? (see above example; no trailing slash) xueweihan.com
&amp;gt; Do you want to enable article pagination? (Y/n)
&amp;gt; How many articles per page do you want? [10]
&amp;gt; What is your time zone? [Europe/Paris] Asia/Shanghai
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n)
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n)
&amp;gt; Do you want to upload your website using FTP? (y/N) n
&amp;gt; Do you want to upload your website using SSH? (y/N) n
&amp;gt; Do you want to upload your website using Dropbox? (y/N) n
&amp;gt; Do you want to upload your website using S3? (y/N) n
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) n
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N)
Done. Your new project is available at /Users/xueweihan/Documents/blog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;文件结构如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blog/
├── content              # 写的文章放这里
├── output               # 生成的输出文件（发布的内容）
├── develop_server.sh    
├── Makefile             # 方便管理博客的Makefile
├── pelicanconf.py       # 主配置文件
└── publishconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们下面只用到我解释的这几个目录和文件，大致有个印象即可&lt;/p&gt;
&lt;p&gt;4.编写文章测试下效果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;
&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;测试&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;测试&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="n"&gt;Pelican&lt;/span&gt; &lt;span class="n"&gt;Static&lt;/span&gt; &lt;span class="n"&gt;Site&lt;/span&gt; &lt;span class="n"&gt;Generator&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Powered&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="err"&gt;：&lt;/span&gt;&lt;span class="n"&gt;Pelican&lt;/span&gt;&lt;span class="err"&gt;是&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="err"&gt;语言写的静态网站生成器。因为我一直打算用&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="err"&gt;做一个博客，现在已经学会用&lt;/span&gt;&lt;span class="n"&gt;Hexo&lt;/span&gt;&lt;span class="err"&gt;在&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="err"&gt;上做博客了。但是我还是一想：我一个&lt;/span&gt;&lt;span class="n"&gt;pythoner&lt;/span&gt;&lt;span class="err"&gt;，干嘛不用&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="err"&gt;写的静态网站生成器。应该是网上教程太少，那我今天就来搞一搞。顺便记录下来，整理出一个教程，希望一切顺利！&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在content目录下创建一个名为：test.md的markdown文件，把上面的那些内容放进去，用来测试效果。&lt;/p&gt;
&lt;p&gt;5.本地查看效果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 在blog目录下执行
pelican content # 根据content中的内容，生成静态网站到output目下

# 在output目录下执行
python -m pelican.server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上两个命令执行完，没有报错的话就用浏览器打开：127.0.0.1:8000，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-02-28%20%E4%B8%8B%E5%8D%885.18.31.png" title="本地效果" /&gt;&lt;/p&gt;
&lt;p&gt;输入：&lt;code&gt;ctrl + c&lt;/code&gt; 停止服务&lt;/p&gt;
&lt;p&gt;5.上传到github pages 现在就差最后一步，上传到github pages上面。 一步步的来：&lt;/p&gt;
&lt;p&gt;首先在github上创建一个项目，&lt;code&gt;Repository name&lt;/code&gt;填写：你的github用户名.github.io 如下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-02-28%20%E4%B8%8B%E5%8D%885.25.05.png" title="github 创建仓库" /&gt;&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;output&lt;/code&gt;目录依次输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git init
git add .
git commit -m &amp;quot;pelican static blog test&amp;quot;
git remote add origin git@github.com:你的github用户名/你的github用户名.github.io.git
# 例如我的就是：git@github.com:521xueweihan/521xueweihan.github.io.git
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后访问：&lt;a href="http://你的github用户名.github.io/"&gt;http://你的github用户名.github.io/&lt;/a&gt; 例如我的就是：&lt;a href="http://521xueweihan.github.io/"&gt;http://521xueweihan.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;页面如下图： &lt;img alt="" src="http://7xqirw.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-02-28%20%E4%B8%8B%E5%8D%885.42.10.png" title="github pages 上效果" /&gt;&lt;/p&gt;
&lt;h2&gt;简化发布流程&lt;/h2&gt;
&lt;p&gt;还记得Makefile文件吗？我们通过修改这个文件，实现1条指令发布博客到github pages上。&lt;/p&gt;
&lt;p&gt;把&lt;code&gt;blog&lt;/code&gt;目录下的Makefile文件中的内容替换成下面的内容(原Makefile文件的内容都不要)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PY?&lt;span class="o"&gt;=&lt;/span&gt;python
PELICAN?&lt;span class="o"&gt;=&lt;/span&gt;pelican
&lt;span class="nv"&gt;PELICANOPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="nv"&gt;BASEDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CURDIR&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;INPUTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/content
&lt;span class="nv"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/output
&lt;span class="nv"&gt;CONFFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/pelicanconf.py
&lt;span class="nv"&gt;PUBLISHCONF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/publishconf.py

DEBUG ?&lt;span class="o"&gt;=&lt;/span&gt; 0
ifeq &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;DEBUG&lt;span class="k"&gt;)&lt;/span&gt;, 1&lt;span class="o"&gt;)&lt;/span&gt;
    PELICANOPTS +&lt;span class="o"&gt;=&lt;/span&gt; -D
endif

RELATIVE ?&lt;span class="o"&gt;=&lt;/span&gt; 0
ifeq &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;RELATIVE&lt;span class="k"&gt;)&lt;/span&gt;, 1&lt;span class="o"&gt;)&lt;/span&gt;
    PELICANOPTS +&lt;span class="o"&gt;=&lt;/span&gt; --relative-urls
endif

html:
    &lt;span class="k"&gt;$(&lt;/span&gt;PELICAN&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -s &lt;span class="k"&gt;$(&lt;/span&gt;CONFFILE&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PELICANOPTS&lt;span class="k"&gt;)&lt;/span&gt;

clean:
    &lt;span class="o"&gt;[&lt;/span&gt; ! -d &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; rm -rf &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;

regenerate:
    &lt;span class="k"&gt;$(&lt;/span&gt;PELICAN&lt;span class="k"&gt;)&lt;/span&gt; -r &lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -s &lt;span class="k"&gt;$(&lt;/span&gt;CONFFILE&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PELICANOPTS&lt;span class="k"&gt;)&lt;/span&gt;

serve:
ifdef PORT
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PY&lt;span class="k"&gt;)&lt;/span&gt; -m pelican.server &lt;span class="k"&gt;$(&lt;/span&gt;PORT&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PY&lt;span class="k"&gt;)&lt;/span&gt; -m pelican.server
endif

publish:
    &lt;span class="k"&gt;$(&lt;/span&gt;PELICAN&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -s &lt;span class="k"&gt;$(&lt;/span&gt;CONFFILE&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PELICANOPTS&lt;span class="k"&gt;)&lt;/span&gt;

github: publish
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; git add . &lt;span class="p"&gt;;&lt;/span&gt;  git commit -m &lt;span class="s1"&gt;&amp;#39;更新博客&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;更新博客流程&lt;/strong&gt;
1. 把写好的markdown格式的文章放到content中，然后在&lt;code&gt;blog&lt;/code&gt;目录下
2. 本地查看效果的话：&lt;code&gt;make html&lt;/code&gt; 然后&lt;code&gt;make serve&lt;/code&gt; 最后访问：127.0.0.1:8000
3. 发布到github：&lt;code&gt;make github&lt;/code&gt; 完成&lt;/p&gt;
&lt;h2&gt;定制属于自己的blog&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;下面的内容算是高级篇了，需要把上面的步骤都完成。想要进一步完美自己的博客的小伙伴&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.独立域名
首先要购买域名，我的实在阿里云上买的，买完之后就需要修改你的域名指向：访问xueweihan.com域名，跳转到你的.github.io。根据你购买域名时候的提示，就可以设置完成了。之后在output目录下，创建CNAME文件。内容就是你购买的域名。因为github pages只允许CNAME中的域名映射。&lt;/p&gt;
&lt;p&gt;2.定制样式结构
一步步的来，首先要找到你喜欢的主题&lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican主题&lt;/a&gt;，下载的时候我推荐&lt;code&gt;Download ZIP&lt;/code&gt;会快很多。下载好你的主题，我们就需要在blog目录下，找到&lt;code&gt;pelicanconf.py&lt;/code&gt;文件，它是在生成静态网站时候的配置文件，定制几乎所有的东西都需要通过这个。增添内容如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;THEME = &amp;#39;你的主题所在目录&amp;#39;
# 例如：THEME = &amp;#39;/Users/root/Documents/blog/tuxlite_tbs&amp;#39;


GITHUB_URL = &amp;#39;https://github.com/你的github用户名&amp;#39;
# 效果是右上角有个fork me on Github，点击进入你的Github主页


DEFAULT_DATE_FORMAT = &amp;#39;%Y-%m-%d&amp;#39;
# 时间格式


SOCIAL = ((&amp;#39;github&amp;#39;, &amp;#39;https://github.com/521xueweihan&amp;#39;),
          (&amp;#39;博客园&amp;#39;, &amp;#39;http://www.cnblogs.com/xueweihan/&amp;#39;))
# 几乎所有的博客主题都有一个地方展示你的社交账号，这些账号就写在这里，上面是我的


DISQUS_SITENAME = &amp;#39;shortname&amp;#39;
# 评论功能，需要在Disqus上申请一个站点，替换shortname
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果有python基础的，可以直接修改主题目录下的&lt;code&gt;template&lt;/code&gt;中的模版。已达到你想要的目录结构和内容的呈现。&lt;/p&gt;
&lt;p&gt;3.简单的SEO
在output文件中创建rebots.txt，这个文件是一个协议文件，没有不会影响什么。但是有的话，有利于搜索引擎的收录。内容如下，允许所有爬虫，同时不允许爬取theme目录下的内容，和所有的图片。：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;User-agent: *
Disallow: /theme/
Disallow: /.gif$
Disallow: /.png$
Disallow: /.jpg$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;大多数主题多是外国人写的，所以他们都支持‘谷歌分析’&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GOOGLE_ANALYTICS = &amp;#39;跟踪ID&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而百度的分析就需要手动的在主题目录下的template目录下的base.html中增添百度的分析代码。&lt;/p&gt;
&lt;p&gt;4.sitemap是对于爬虫友好的一个文件，它告诉爬虫，网站的更新频率和优先级等。&lt;a href="http://baike.baidu.com/view/1072062.htm"&gt;详情&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;增添插件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://github.com/getpelican/pelican-plugins.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改pelicanconf.py文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PLUGIN_PATH = u&amp;quot;pelican-plugins&amp;quot;
PLUGINS = [&amp;quot;sitemap&amp;quot;]
SITEMAP = {
    &amp;quot;format&amp;quot;: &amp;quot;xml&amp;quot;,
    &amp;quot;priorities&amp;quot;: {
        &amp;quot;articles&amp;quot;: 0.7,
        &amp;quot;indexes&amp;quot;: 0.5,
        &amp;quot;pages&amp;quot;: 0.3,
    },
    &amp;quot;changefreqs&amp;quot;: {
        &amp;quot;articles&amp;quot;: &amp;quot;monthly&amp;quot;,
        &amp;quot;indexes&amp;quot;: &amp;quot;daily&amp;quot;,
        &amp;quot;pages&amp;quot;: &amp;quot;monthly&amp;quot;,
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5.favicon.ico
放在output的根目录下。&lt;/p&gt;
&lt;p&gt;6.订阅
因为pelican的库包含了feedgenerator。feedgenerator是用来生成Atom feeds（是包含你博客数据的xml的文件）用于订阅。所以你只需要在&lt;code&gt;pelicanconf.py&lt;/code&gt;加入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FEED_ALL_RSS =  &amp;#39;feeds/all.rss.xml&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;博客就会自动生成订阅功能了。&lt;/p&gt;
&lt;p&gt;7.关于我
这个就像相当于一个自我介绍的页面，所以就需要在&lt;code&gt;content&lt;/code&gt;目录下创建一个&lt;code&gt;pages&lt;/code&gt;目录，然后把你要展示的内容放到&lt;code&gt;pages&lt;/code&gt;目录下就可以了。&lt;/p&gt;
&lt;h2&gt;最终效果&lt;/h2&gt;
&lt;p&gt;我的博客：&lt;a href="xueweihan.com"&gt;xueweihan.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;问题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当删除了一篇博文，但是以我上面所说的方式发布的话。那片文章其实还是存在于github pages上的。只不过没有在模版中生成链接罢了。这种类似的情况会导致：换主题css丢失等问题。当然如果你清空&lt;code&gt;output&lt;/code&gt;目录，然后重新生成网站的话，就没问题。但是清空的话，会导致一切不因该被删的文件也都被删除了，例如：.git和CNAME等文件。所以我就写了一个&lt;code&gt;del.sh&lt;/code&gt;，用于删除pelican生成的文件，其他哪些通用文件都不删除。这样暂时可以解决问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本来想要在两台电脑上都可以发布文章，修改完makefile我发现不是刚性需求，同时实现效果不好。最后的解决方案是，把文章写在另外的一个github的项目中，分布式编辑这个项目。最后写文章之前，&lt;code&gt;git pull&lt;/code&gt;获取最新的文章，这样就可以同步最新的内容进行修改发布了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我遇到的另外一个问题，就是pelican－theme上面大多都是国外的主题，有的主题中的jquery.js是用的google的cdn。在国内访问的时候会造成找不到jquery.js对体验和响应时间造成很大的影响。所以，部署完站点后，最好打开浏览器的开发者模式，查看一下各个文件的请求耗时。如果有我上述情况，那么你可以尝试把那个请求耗时过长的静态文件，下载好，放到该主题目录下&lt;code&gt;static&lt;/code&gt;中对应的目录内。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这个其实不是问题，算是一个建议。文章的格式中，加入&lt;code&gt;Slug: test&lt;/code&gt;。这个字段的是：用于文章生成url的。不添加这个字段话，默认是拼音的url。但是有时侯拼音是错误的，而且对于搜索引擎很不友好。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.lizherui.com/pages/2013/08/17/build_blog.html"&gt;lizherui的博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/3.5.0/quickstart.html"&gt;pelican官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pelican-zh.readthedocs.org/en/latest/zh-cn/"&gt;pelican中文文档（不全）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jianshu.com/p/d80a5cefc128"&gt;Pelican搭建静态博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">xueweihan</dc:creator><pubDate>Mon, 29 Feb 2016 18:00:00 +0800</pubDate><guid>tag:xueweihan.com,2016-02-29:pelican-build-bolg.html</guid><category>pelican</category><category>Github pages</category><category>博客</category></item><item><title>HelloWorld</title><link>http://xueweihan.com/helloworld.html</link><description>&lt;h1&gt;博客的第一天&lt;/h1&gt;
&lt;p&gt;我原来的博客写在&lt;a href="http://www.cnblogs.com/xueweihan/" title="我原来的博客"&gt;博客园&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天终于搞定了我的xueweihan.com的博客网站：采用的是pelican和tuxlite主题，托关于github pages，详细教程请&lt;a href="http://xueweihan.com/yong-pelicanzai-github-pagesshang-da-jian-bo-ke.html" title="pelican 搭建博客教程"&gt;参考&lt;/a&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;为什么这么搞&lt;/h2&gt;
&lt;p&gt;首先，因为我是个后端工程师，所以觉得命令行的东西比较方便，同时希望：写文章用markdown，发布文章通过命令行，简单方便，不需要维护，独立域名。所以静态网站生成器和github pages这个解决方案可以完美解决我的需求。所以我就这么搞了。&lt;/p&gt;
&lt;p&gt;我使用的python写的静态网站生成器，因为我是pythoner这样的好处就是我看的懂源代码和模版语言。这样我就可以根据我的喜好去修改布局和样式。同时'人生苦短，我用python～'&lt;/p&gt;
&lt;h2&gt;打算&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;xueweihan.com&lt;/code&gt;域名，五年后才到期。所以我打算每个星期一篇高质量的文章。我想我会坚持下去的，写博客是一个很好的习惯，有助于提高很多方面的能力。而且能记录我的成长，在这个社交网络复杂，功能繁多的时代。像这样可以安静的码字，用文字单纯的纪录一些东西，可以算得上是一片&lt;strong&gt;净土&lt;/strong&gt;了。&lt;/p&gt;
&lt;h2&gt;内容&lt;/h2&gt;
&lt;p&gt;我的博客主要内容是技术的文章，还有就是我的读书笔记，偶尔的人生感悟。&lt;/p&gt;
&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;既然留不住青春，那我就纪录青春！随然我15年大学毕业的，但是我现在依旧青春啊。所以我现在是纪录青春，同时书写我的青春！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">xueweihan</dc:creator><pubDate>Sun, 28 Feb 2016 00:00:00 +0800</pubDate><guid>tag:xueweihan.com,2016-02-28:helloworld.html</guid><category>博客</category></item></channel></rss>